---
# tasks file for artifactory

# Create a User named Artifactory to execute artifactory as a user
- name: Add the user 'artifactory'
  ansible.builtin.user:
    name: artifactory
    comment: Artifactory-Service-Account
    # group: artifactory
  tags:
    - user

# Install some tools
- name: "Install some tools when Rocky"
  yum:
    name: 
      - "wget"
      - "tar"
      - "unzip"
      - "nginx"
      - "python3-libsemanage"
      - "policycoreutils-devel.x86_64"
      - "setroubleshoot-server.x86_64"
      - "setools-console-4.4.4-1.el9.x86_64"
      - "net-tools-2.0-0.62.20160912git.el9.x86_64" # Needed for Artifactory
    state: "present"
  when: ansible_distribution == 'Rocky'

- name: "Install some tools when RHEL"
  yum:
    name: 
      - "wget"
      - "tar"
      - "unzip"
      - "nginx"
      - "python3-libsemanage"
      - "policycoreutils-devel.x86_64"
      - "setroubleshoot-server.x86_64"
      - "setools.x86_64"
      - "net-tools.x86_64" # Needed for Artifactory
      - "podman.x86_64"
    state: "present"
  when: ansible_distribution == 'RedHat'

# Create some working directories
- name: "Create jfrog-Working Directories"
  file:
    path: "{{ item }}"
    #owner: root
    #group: root
    #mode: '0755'
    state: directory
    recurse: true
  loop:
    - "{{dir_root}}"
    - "{{dir_ssl_certs}}"
    - "{{dir_downloads}}"

# Download Binaries
- name: Download jfrog tar.gz
  get_url:
    url: "{{jfrog_download_url}}"
    dest: "{{dir_root}}{{jfrog_filename}}"

# Download oc-client
- name: "Download OpenShift - oc-client"
  get_url:
    url="{{link_to_oc}}"
    dest="{{ dir_downloads }}{{file_oc}}"
  register: get_oc

# Download oc-mirror-client
- name: "Download OpenShift - oc-mirror-client"
  get_url:
    url="{{link_to_oc_mirror}}"
    dest="{{ dir_downloads }}{{file_oc_mirror}}"
  register: get_oc_mirror

# Download openshift-installer
- name: "Download OpenShift - openshift-installer"
  get_url:
    url="{{link_to_openshift_installer}}"
    dest="{{ dir_downloads }}{{file_openshift_installer}}"
  register: get_installer

# Unarchive Binary
- name: "Unarchive jfrog tar.gz"
  unarchive:
    src: "{{dir_root}}{{jfrog_filename}}"
    dest: "{{ dir_root }}"
    remote_src: yes

# Extraction of zip-archive
- name: "Unarchive the oc-client"
  unarchive:
    src: "{{ dir_downloads }}openshift-client-linux-{{version_openshift}}.tar.gz"
    dest: "{{ dir_downloads }}"
    remote_src: "true"

# Extraction of zip-archive
- name: "Unarchive the oc-mirror-client"
  unarchive:
    src: "{{ dir_downloads }}{{file_oc_mirror}}"
    dest: "{{ dir_downloads }}"
    remote_src: "true"

# Extraction of zip-archive
- name: "Unarchive the openshift-installer"
  unarchive:
    src: "{{ dir_downloads }}openshift-install-linux-{{version_openshift}}.tar.gz"
    dest: "{{ dir_downloads }}"
    remote_src: "true"

# Make oc executable >> copy to /usr/local/bin/oc
- name: "copy oc to /usr/local/bin and make executable"
  copy:
    src: "{{ dir_downloads }}oc"
    dest: "/usr/local/bin/oc"
    mode: "0755"
    remote_src: "true"

# Make openshift-installer executable >> copy to /usr/local/bin/openshift-install
- name: "copy openshift-install to /usr/local/bin and make executable"
  copy:
    src: "{{ dir_downloads }}openshift-install"
    dest: "/usr/local/bin/openshift-install"
    mode: "0755"
    remote_src: "true"

# # Open some firewall ports
# - name: "Firewall - Open http and https firewall-services"
#   firewalld:
#     service: "{{item}}"
#     permanent: yes
#     state: "enabled"
#   with_items:
#     - "http"
#     - "https"

- name: "Firewall - Open some firewall-ports"
  ansible.posix.firewalld:
    port: "{{item}}"
    permanent: true
    state: enabled
  loop:
    - "8081/tcp"
    - "8082/tcp"
    - "80/tcp"
    - "443/tcp"
  notify:
    - Restart Firewalld


# Copy SSL-Certificates to Nginx
- name: "Copy artifactory.config.import.xml to start Artifactory with predefined config"
  copy:
    src: "{{item}}"
    dest: "{{dir_ssl_certs}}"
  loop:
    - "wildcard-artifactory-crt.pem"
    - "wildcard-artifactory-key.pem"
    - "password-for-private-key"

# Configure Nginx
- name: "Template /etc/nginx/nginx.conf for Artifactory"
  template:
    src: "templates/nginx.conf.j2"
    dest: "/etc/nginx/nginx.conf"

- name: "Template nginx.conf for Artifactory"
  template:
    src: "templates/nginx-artifactory.conf.j2"
    dest: "/etc/nginx/conf.d/nginx-artifactory.conf"

# Accept Eula
- name: "Template eula-accept.yaml for Artifactory"
  template:
    src: "templates/eula-accept.yaml"
    dest: "{{dir_install}}/var/etc/artifactory/artifactory.config.import.yml"

# Copy artifactory.config.latest.xml for bootstrapping
# $JFROG_HOME/artifactory/var/etc/artifactory/artifactory.config.import.xml
# - name: "Copy artifactory.config.import.xml to start Artifactory with predefined config"
#   copy:
#     src: artifactory.config.import.xml
#     dest: "{{dir_root}}artifactory-jcr-{{jfrog_version}}/var/etc/artifactory/artifactory.config.import.xml"

# chown -R artifactory:artifactory /jfrog/downloads/artifactory-jcr-7.27.6/app
# Change Ownership of jfrog-App-Directory
- name: Recursively change ownership of jfrog-App-Directory
  ansible.builtin.file:
    path: "{{dir_root}}"
    state: directory
    recurse: yes
    owner: artifactory
    group: artifactory
  tags:
    - user

# # Get SELinux-Status
# - name: Get SELinux-Status
#   set_fact:
#     selinux_status: "{{ ansible_selinux.status | default('disabled') }}"

# # Set Selinux Policies
# - name: Add custom SELinux fcontext
#   sefcontext:
#     target: "{{ dir_ssl_certs | regex_replace('/$') }}(/.*)?"
#     setype: httpd_sys_content_t
#     state: present
#   when: selinux_status == 'enforcing'
#   tags:
#     - selinux

# - name: Restorecon on jfrog-root-dir
#   command: "/usr/sbin/restorecon -Rv {{ dir_ssl_certs }}" 
#   when: selinux_status == 'enforcing'
#   tags:
#     - selinux

# Start Artifactory via systemd
# /jfrog/downloads/artifactory-jcr-7.27.6/app/bin/artifactory.sh start
- name: "Copy template-systemd-file to systemd"
  template:
    src: "templates/systemd-artifactory-service.j2"
    dest: "/usr/lib/systemd/system/artifactory.service"
  # tags:
  #   - systemd

# Systemd - daemon-reload
- name: Just force systemd to reread configs - systemctl daemon-reload
  ansible.builtin.systemd:
    daemon_reload: true
  tags:
    - systemd

# Start Nginx via systemd
- name: Make sure a nginx-service unit is running
  ansible.builtin.systemd:
    state: started
    name: nginx
    enabled: true
  tags:
    - systemd
# Start Artifactory via systemd
- name: Make sure a artifactory-service unit is running
  ansible.builtin.systemd:
    state: started
    enabled: true
    name: artifactory.service
  tags:
    - systemd